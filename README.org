#+title: too-wide-minibuffer-mode - shrink minibuffer if the frame is too wide
#+author: Aleksei Gusev
#+language: en

#+html: <a href="https://www.gnu.org/software/emacs/"><img alt="GNU Emacs" src="https://img.shields.io/badge/GNU_Emacs-29.1%2B-%237F5AB6?logo=gnuemacs&logoColor=white"/></a>
#+html: <a href="https://melpa.org/#/too-wide-minibuffer-mode"><img alt="MELPA" src="https://melpa.org/packages/too-wide-minibuffer-mode-badge.svg"/></a>

too-wide-minibuffer-mode adjusts minibuffer size and position, so it is displayed under the selected window and occupied half of the frame. It is move convenient to focus if the frame is too wide.

#+html: <img src="https://github.com/hron/too-wide-minibuffer-mode/blob/main/too-wide-minibuffer-demo.png?raw=true">

* Installation

The package is available from
[[https://melpa.org/#/too-wide-minibuffer-mode][MELPA]].  After installation, activate the
global minor mode with =M-x too-wide-minibuffer-mode RET=.

* Configuration


#+begin_src emacs-lisp
(use-package too-wide-minibuffer-mode
  :init
  (too-wide-minibuffer-mode +1)

  :custom
  ;; The maximum allowed width for minibuffer window to display as is.
  (too-wide-minibuffer-max-width 200)
  ;; The mode is not compatible with `minibuffer-follows-selected-frame` set to `t`
  (minibuffer-follows-selected-frame nil))
#+end_src

* Compatibility

This mode doesn't work properly if `minibuffer-follows-selected-frame` is set to
`t` and there are more than one frame. Please disable this setting in your
configuration to avoid a warning message.

* Alternatives

Apparently, this problem was solved one way or another many times in Emacs community. Here are the list of alternatives with a few words about the differences:

- [[https://github.com/tumashu/vertico-posframe][vertico-posframe]] works great, but only if you use vertico package and only to show completion candidates. It means it doesn't control where Emacs shows `I-search:` prompt for example
- [[https://github.com/muffinmad/emacs-mini-frame?tab=readme-ov-file][emacs-mini-frame]] again, doesn't control the echo area, also moves the minibuffer to a separate frame which creates problems with window managements
- [[https://github.com/honmaple/emacs-maple-minibuffer/][emacs-maple-minibuffer]] wraps around Emacs any command and should work with `isearch-forward` and `query-replace`, but in practice these commands don't always use standard minibuffer interactions and at least for me neither isearch nor query-replace work reliably
- [[https://github.com/tumashu/ivy-posframe][ivy-posframe]] the same as vertico-posframe, great for completion candidates when you use `ivy`, but doesn't affect isearch, echo area messages and etc
